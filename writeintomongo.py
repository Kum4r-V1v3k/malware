import pymongo
import datetime


class Recorder:
    def __init__(self):
        self.collection_deleted_data_directory = None
        self.collection_modified_data_directory = None
        self.collection_on_renamed_data_file = None
        self.collection_deleted_data_file = None
        self.collection_modified_data_file = None
        self.collection_create_data_directory = None
        self.collection_on_renamed_data_directory = None
        self.collection_create_data_file = None
        self.create_file_id = 0
        self.create_directory_id = 0
        self.modified_file_id = 0
        self.modified_directory_id = 0
        self.delete_file_id = 0
        self.delete_directory_id = 0
        self.renamed_file_id = 0
        self.renamed_directory_id = 0
        self.connect_database()

    def connect_database(self):
        client = pymongo.MongoClient("mongodb://localhost:27017/")
        db = client['records']
        self.collection_create_data_file = db['file_create_data']
        self.collection_create_data_directory = db['directory_create_data']
        self.collection_modified_data_file = db['file_modified_data']
        self.collection_deleted_data_file = db['file_deleted_data']
        self.collection_on_renamed_data_file = db['file_on_rename_data']
        self.collection_modified_data_directory = db['directory_modified_data']
        self.collection_deleted_data_directory = db['directory_deleted_data']
        self.collection_on_renamed_data_directory = db['directory_on_rename_data']
        max_id = self.collection_create_data_file.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)

        try:
            self.create_file_id = max_id[0]['_id'] + 1
        except IndexError:
            self.create_file_id = 0

        try:
            max_id = self.collection_create_data_directory.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.create_directory_id = max_id[0]['_id'] + 1
        except IndexError:
            self.create_directory_id = 0

        try:
            max_id = self.collection_modified_data_file.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.modified_file_id = max_id[0]['_id'] + 1
        except IndexError:
            self.modified_file_id = 0

        try:
            max_id = self.collection_modified_data_directory.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.modified_directory_id = max_id[0]['_id'] + 1
        except IndexError:
            self.modified_directory_id = 0

        try:
            max_id = self.collection_deleted_data_file.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.delete_file_id = max_id[0]['_id'] + 1
        except IndexError:
            self.delete_file_id = 0

        try:
            max_id = self.collection_create_data_directory.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.delete_directory_id = max_id[0]['_id'] + 1
        except IndexError:
            self.delete_directory_id = 0

        try:
            max_id = self.collection_on_renamed_data_file.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.renamed_file_id = max_id[0]['_id'] + 1
        except IndexError:
            self.renamed_file_id = 0

        try:
            max_id = self.collection_on_renamed_data_directory.find({}, {"_id": 1}).sort({"_id": -1}).limit(1)
            self.renamed_directory_id = max_id[0]['_id'] + 1
        except IndexError:
            self.renamed_directory_id = 0

    def created(self, content):
        if "File created:" in content:
            dict_data_file = {}
            path = content.replace("File created: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_file['_id'] = self.create_file_id
            dict_data_file['event'] = 'File created'
            file_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_file['file_name'] = file_name.strip()
            dict_data_file['path'] = path.strip()
            dict_data_file['time_created'] = time_now
            self.collection_create_data_file.insert_one(dict_data_file)
            self.create_file_id += 1
        if "Directory created:" in content:
            dict_data_directory = {}
            path = content.replace("Directory created: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_directory['_id'] = self.create_directory_id
            dict_data_directory['event'] = 'Directory created'
            directory_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_directory['directory_name'] = directory_name.strip()
            dict_data_directory['path'] = path.strip()
            dict_data_directory['time_created'] = time_now
            self.collection_create_data_directory.insert_one(dict_data_directory)
            self.create_directory_id += 1

    def modified(self, content):
        if "File modified:" in content:
            dict_data_file = {}
            path = content.replace("File modified: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_file['_id'] = self.modified_file_id
            dict_data_file['event'] = 'File modified'
            file_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_file['file_name'] = file_name.strip()
            dict_data_file['path'] = path.strip()
            dict_data_file['time_modified'] = time_now
            self.collection_modified_data_file.insert_one(dict_data_file)
            self.modified_file_id += 1
        if "Directory modified:" in content:
            dict_data_directory = {}
            path = content.replace("Directory modified: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_directory['_id'] = self.modified_directory_id
            dict_data_directory['event'] = 'Directory modified'
            directory_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_directory['directory_name'] = directory_name.strip()
            dict_data_directory['path'] = path.strip()
            dict_data_directory['time_modified'] = time_now
            self.collection_modified_data_directory.insert_one(dict_data_directory)
            self.modified_directory_id += 1

    def deleted(self, content):
        if "File deleted:" in content:
            dict_data_file = {}
            path = content.replace("File deleted: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_file['_id'] = self.delete_file_id
            dict_data_file['event'] = 'File deleted'
            file_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_file['file_name'] = file_name.strip()
            dict_data_file['path'] = path.strip()
            dict_data_file['time_deleted'] = time_now
            self.collection_deleted_data_file.insert_one(dict_data_file)
            self.delete_file_id += 1
        if "Directory deleted:" in content:
            dict_data_directory = {}
            path = content.replace("Directory deleted: ", '')
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_directory['_id'] = self.delete_directory_id
            dict_data_directory['event'] = 'Directory modified'
            directory_name = content.split("/")[-1] if "/" in content else content.split("\\")[
                -1] if "\\" in content else content
            dict_data_directory['directory_name'] = directory_name.strip()
            dict_data_directory['path'] = path.strip()
            dict_data_directory['time_deleted'] = time_now
            self.collection_deleted_data_directory.insert_one(dict_data_directory)
            self.delete_directory_id += 1

    def renamed(self, content):
        if "File renamed :" in content:
            dict_data_file = {}
            paths = content.replace("File renamed : ", '')
            paths = paths.split(" to ")
            initial_path = paths[0]
            final_path = paths[1]
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_file['_id'] = self.renamed_file_id
            dict_data_file['event'] = 'File renamed'
            dict_data_file['initial_name'] = initial_path.split("/")[-1] if "/" in initial_path \
                else initial_path.split("\\")[-1] if "\\" in initial_path else initial_path
            dict_data_file['final_name'] = final_path.split("/")[-1] if "/" in final_path \
                else final_path.split("\\")[-1] if "\\" in final_path else final_path
            dict_data_file['time_renamed'] = time_now
            self.collection_on_renamed_data_file.insert_one(dict_data_file)
            self.renamed_file_id += 1
        if "Directory renamed :" in content:
            dict_data_directory = {}
            paths = content.replace("Directory renamed : ", '')
            paths = paths.split(" to ")
            initial_path = paths[0]
            final_path = paths[1]
            time_now = datetime.datetime.now()
            time_now = time_now.strftime("%d-%m-%Y %H:%M:%S")
            dict_data_directory['_id'] = self.renamed_directory_id
            dict_data_directory['event'] = 'Directory Moved'
            dict_data_directory['initial_name'] = initial_path.split("/")[-1] if "/" in initial_path \
                else initial_path.split("\\")[-1] if "\\" in initial_path else initial_path
            dict_data_directory['final_name'] = final_path.split("/")[-1] if "/" in final_path \
                else final_path.split("\\")[-1] if "\\" in final_path else final_path
            dict_data_directory['path'] = paths[1].strip()
            dict_data_directory['time_renamed'] = time_now
            self.collection_on_renamed_data_directory.insert_one(dict_data_directory)
            self.renamed_directory_id += 1

    def search(self, filename):
        results = []
        file_create = self.collection_create_data_file.find({'file_name': {'$regex': filename}})
        if file_create is not None:
            lst = []
            for i in file_create:
                lst.append(i)
            results.append(lst)
        directory_create = self.collection_create_data_directory.find({'directory_name': {'$regex': filename}})
        if directory_create is not None:
            lst = []
            for i in directory_create:
                lst.append(i)
            results.append(lst)
        file_modified = self.collection_modified_data_file.find({'file_name': {'$regex': filename}})
        if file_modified is not None:
            lst = []
            for i in file_modified:
                lst.append(i)
            results.append(lst)
        directory_modified = self.collection_modified_data_directory.find({'directory_name': {'$regex': filename}})
        if directory_modified is not None:
            lst = []
            for i in directory_modified:
                lst.append(i)
            results.append(lst)
        file_deleted = self.collection_deleted_data_file.find({'file_name': {'$regex': filename}})
        if file_deleted is not None:
            lst = []
            for i in file_deleted:
                lst.append(i)
            results.append(lst)
        directory_deleted = self.collection_deleted_data_directory.find({'directory_name': {'$regex': filename}})
        if directory_deleted is not None:
            lst = []
            for i in directory_deleted:
                lst.append(i)
            results.append(lst)
        file_renamed = self.collection_on_renamed_data_file.find({'final_name': {'$regex': filename}})
        if file_renamed is not None:
            lst = []
            for i in file_renamed:
                lst.append(i)
            results.append(lst)
        directory_renamed = self.collection_on_renamed_data_directory.find({'final_name': {'$regex': filename}})
        if directory_renamed is not None:
            lst = []
            for i in directory_renamed:
                lst.append(i)
            results.append(lst)
        return results
